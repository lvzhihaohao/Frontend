
Java 基础语法 

一个java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作，下面简要介绍下，类，对象，方法和实例变量的概念

对象：对象是类的一个实例，有状态和行为，列入，一条狗是一个对象，它的状态有：颜色，名字，品种；行为有：摇尾巴，叫，吃等。
类：类就是一个模板，它描述一类对象的行为和状态。
方法：方法就是行为，一个类可以有很多方法。逻辑运算，数据修改以及所有动作都是在方法中完成的。
实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定

public class HelloWorld {
    /* 第一个Java程序
     * 它将输出字符串 Hello World
     */
    public static void main(String[] args) {
        System.out.println("Hello World"); // 输出 Hello World
    }
}

public ：访问修饰符 static：关键字 void：返回类型 main ：方法名 String[]:String类  args:字符串数组



基本语法

编写Java程序时，应注意以下几点：
 大小写敏感：java是大小写敏感的，这就意味着标识符Hello 与 hello是不同的。
 类名：对于所有类来说，类名的首字母应该大写，如果类名由若干单词组成，那么每个单词的首字母应该大写，
   例如 MyFirstJavaClass
方法名：所有的方法名都应该以小写字母开头，如果方法名含有若干胆子，则后面的每个单词首字母大写
源文件名：源文件名必须和类名相同，当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java（如果文件名和类名不相同则会编译错误）
主方法入口：所有java程序由   public static void main(String[] args) 执行

Java标识符

java所有的组成部分都需要名字，类名，变量名以及方法名都被称为标识符
源于java标识符，有以下几点需要注意：
 1.所有的标识符都应该以字母（A-Z或者a-z），美元符（$）,或者下划线（_）开始
 2.首字符之后可以是字母（A-Z或者a-z），美元符（$）,或者下划线（_）或者数字的任何字符组合
 3.关键字不能做标识符
 4.标识符是大小写敏感的
 5.合法标识符举例：age。$salary,_value,_1_value
 6. 非法标识符举例：123abc，-salary

java修饰符

像其他语言一样，java可以使用修饰符来修饰类中方法和属性，主要有两类修饰符

  1.访问控制修饰符：default，public，protected，private
  2.非访问控制修饰符：final，abstract，static，synchronized

java变量
  java中主要有如下几种数据的变量
  1.局部变量
   2.类变量（静态变量）
  3.成员变量（非静态变量）
java数组
  数组是储存在堆上的对象，可以保存多个同类型变量，我们将学到如何声明，构造以及初始化一个数组。
 java枚举
 java5.0 引入了枚举，枚举限制变量只能是预先设定好的值，使用枚举可以减少代码中的bug
 例如：我们为果汁店设计一个程序，它将限制果汁为小杯，中杯，大杯，这就意味着它不允许顾客点除了这三种尺寸外的果汁

继承
 在java中，一个类可以由其他类派生，如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法没那么你可以将创建的类继承该类。
利用继承的方法，可以重用已经存在类的方法和属性，而不用重写这些代码，被继承的类称为超类（super class）
派生类被称为子类（subclass）

接口

在java中，接口可理解为对象间互相通信的协议，接口在继承中扮演着很重要的角色，
接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。

java源程序与编译型运行区别

 编译型源程序 - 编译连接 - 可执行程序.exe =  执行-操作系统-裸机
 java源程序（.java）-编译-字节码程序（.class）=解释执行 - 解释器-操作系统-裸机

java对象和类

 java作为一种面向对象的语言 支持以下基本概念：
   1.多态 
   2.继承
   3.封装
   4.抽象
   5.类
   6.对象
  7.实例
  8.方法
  9.重载
  对象和类的感念
  对象：对象是类的一个实例，有状态和行为，例如，一条狗是一个对象，他的状态有：颜色，名字，品种，行为有：摇尾巴，叫，吃，等
 类：类是一个模板，它描述一类对象的行为和状态

类可以看成是创建java对象的模板 

一个类可以包含以下类型变量：

 局部变量：在方法，构造方法或者语句块中定义的变量被称为局部变量，变量生命和初始化都是在方法中，方法结束后，变量会自动销毁；
 成员变量：成员变量是定义在类中 ，方法体之外的变量。这种变量在创建对象的时候实例化，成员变量可以被类中方法，构造方法和特定类的语句块访问。
类变量：类变量也声明在类中，方法体之外，但必须声明为static类型，
一个类可以拥有多个方法，在上面例子中：eat（） run（） sleep（） 和name（） 都是god类的方法。

构造方法
  每个类都有构造方法，如果没有显示的为类定义构造方法，java编译器将为该类提供一个默认构造方法
 在创建一个对象的时候，至少要调用一个构造方法，构造方法的名称必须与类同名，一个类可以有多个构造方法。
 下面是一个构造方法实例：
  public class Puppy{
    public 	Puppy（）{
    }
    public Puppy（String name）{

    }
 }


 
创建对象

 对象是根据类创建的。在java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：
  1.声明：声明一个对象，包括对象名称和对象类型。
  2.实例化：使用关键字new来创建一个对象
  3.初始化：使用new创建对象时，会调用构造方法初始化对象。
 
public class Puppy{
   public Puppy(String name){
      //这个构造器仅有一个参数：name
      System.out.println("小狗的名字是 : " + name ); 
   }
   public static void main(String[] args){
      // 下面的语句将创建一个Puppy对象
      Puppy myPuppy = new Puppy( "tommy" );
   }
}


访问实例变量和方法
通过已创建的对象来访问成员变量和成员方法，
 Object rererenceVariable = new Constructor();
 referenceVariable.variableName;
 rererenceVariable.methodName()



源文件声明规则

 在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。
 1.一个源文件只能有一个public类
 2.一个源文件可以有多个非public类
 3.源文件的名称应该和public类的类名保持一致，例如：源文件中public类的类名是 Employee，那么源文件应该命名为Employee.java 
 4.如果一个类定义在某个包中。那么package语句应该在源文件的首行。
 5.如果源文件包含import语句，那么应该放在package语句和类定义之间，如果没有package语句，那么import语句应该在源文件中最前面
 6.import语句和package语句对源文件中定义的所有类都有效，在同一源文件中，不能给不同的类不同的包声明。

类有若干种访问级别，并且类也分不同的类型：抽象类和final类等，这些将在访问控制章节介绍。
除了上面提到的几种类型，java还有一些特殊的类，如：内部类，匿名类。

java包

 包主要用来对类和接口进行分类，当开发java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。

 import语句
 在java中，如果给出一个完整的限定名，包括包名，类名，那么java编译器就可以很容易的定位到源代码或者类，import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。
 import java.io.*

一个简单的例子
 在该例子中，我们创建两个类：Employee 和 EmployeeTest。
 首先打开文本编译器，把下面的代码粘贴进去。注意将文件保存为Employee.java。
 Employee 类有四个成员变量：name，age，designation 和 salary。该类显示声明了一个构造方法，该方法只有一个参数。



java 基本数据类型 

 变量就是申请内存来存储值，也就是说，当创建变量的时候，需要在内存中申请空间，
内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来存储该类型数据。

代码 int x = 7 ； int y = 10；
内存：x 7 y 10

因此，通过定义不同类型的变量，可以在内存中存储整数，小数或者字符。

1.内置数据类型
2.引用数据类型

内置数据类型
 java语言提供了8种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。

1.byte：
   byte数据类型是8位，有符号的，以二进制补码表示的整数；
   最小值是-128（-2^7);
   最大值是 127(2^7^1);
   默认值是0
  byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一；
 例子： byte a = 100，byte = -20.

2.short：
  short数据类型是16位，有符号的以二进制补码表示的整数
  最小值是-32768(-2^15)
  最大值32767(2^15 -1)
  short 数据类型也可以像byte那样节省空间，一个short变量是int型变量所占空间的二分之一
  默认值是0
  例子：short s=1000，short r= -20000.
3.int：
  int数据类型是32位，有符号的以二进制补码表示的整数；
  一般的整型变量默认问int类型 
   默认值是 0
  例子 int a = 100000，int b = -200000
4.long
  long的数据类型是64位，有符号的以二进制补码表示的整数；
  这种类型主要使用在需要比较大整数的系统上
  默认值是 oL；
  例子：long a = 100000L，Long b = -2000000L。
  L 理论不分大小写，但是若写成 i 容易与数字 1 混淆，不容易分辨，所以最好大写，
 5.float
   float数据类型是单精度，32位，符合IEEE 754标准的浮点数；
   默认值 是 0.0f
   浮点数不能用来表示精确的值，如货币；
   例子 ： float f1=234.5f
 6.double
   double 数据类型是双精度，64位，符合IEEE754 标准的浮点数；
   浮点数的类型为double 类型；
  double类型同样不能表示精确的值，如货币；
  默认值是 0.0d
  例子：
 double d1 = 7D；
 double d2 = 7.
 double d3 = 8.0
 double d4 = 8.D
 double d5 =12.9876；
7是int字面量，而7D，7.和8.0 是double 字面量

7.boolean：
 boolean数据类型表示一位的信息：
只有两个取值：true和flase；
 这种类型只能作为一种标志来记录 true、false 情况
 默认值是fasle；
 例子 ： boolean one = true 

8.char
 char 类型是一个单一的16位 Unicode 字符；
 最小值是 \u0000 （十进制等效值为0）
 最大值\ufff （即为65535）
 char 数据类型可以存储任何字符
 例子：char letter = “A”


 



































