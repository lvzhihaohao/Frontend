引用类型 
 1.在java中，引用类型的变量非常类似于c、c++的指针。引用类型指向一个对象，指向对象的变量是引用变量，这些变量在声明时被指定为一个特定的类型，比如Employee。Puppy等。变量一旦声明后，类型就不能被改变了。
 2.对象。数组都是引用数据类型
 3.所有引用类型的默认值都是null
 4.一个引用变量可以用来引用任何与之兼容的类型。
 5.例子：Site site = new Site（“Runoob”）
 
java 常亮
 常量在程序运行时是不能被修改的。
 在java中使用final 关键字来修饰常量，声明方式和变量类似
 final doubel PI = 3.1415926

 虽然常量名也可以小写，但为了便于识别，通常使用大写字母表示常量，字面量可以赋给任何内置类型的变量。例如 ： byte a = 68 ； char a= “A”

 byte。int。long。和short都可以用十进制。16进制，以及8进制的方式来表示
 当使用字面量的时候，前缀0表示8进制，而前缀0x代表16进制：例如
 int decimal = 100；
 int octal = 0144；
 int hexa = 0x64；

 和其他语言一样。java的字符串常量也是包含在两个引号之间的字符序列，下面是字符串型字面量的例子：
  
“hello world” “two\nlines” “\“This is in qoutex\””

 字符串常量和字符常量都可以包含任何Unicode字符。字符：
 char a = ‘\u0001’；
 String a = ‘\u0001’；

 自动类型转换

  整型，实型（常量），字符型数据可以混合运算，运算中，不同类型的数据先转为为同一类型，然后进行运算。
  转换从低级到高级。
  低----------高
 byte，short，char - int - long - float - double

 数据类型转换必须满足如下规则：
 1.不能对boolean类型进行类型转换，
  2.不能把对象类型转换成不相关类的对象。
 3.在把容量大的类型转换为容量小的类型时必须使用强制类型转换。
 4.转换过程中可能导致溢出或损失精度：例如
 int i =128；
 byte b = （byte）i；
 因为byte类型是8位，最大值是127；所以当int强制转换为btye类型时，值128时候就会导致溢出 
 5.浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入
  （int）23.7 == 27
   （int）-45.89f == -45
 
 自动类型转换

  必须满足转换前的数据类型的位数要低于转换后的数据类型，例如：short数据类型的位数为16位，
  就可以自动转换为32的int类型，同样float数据类型的位数为32，可以自动转换Wie64位的double的类型
 实例
 










 